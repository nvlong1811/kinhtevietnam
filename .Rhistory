View(HCM)
#loc ra nhung benh nhan o HCM da tu vong va tren 60 tuoi
HCM_Recovered <- subset(HCM, HCM$Status=='Death'&HCM$Age>60)
View(HCM_Recovered)
#loc ra nhung benh nhan o HCM da tu vong va tren 60 tuoi
HCM_Death<- subset(HCM, HCM$Status=='Death'&HCM$Age>60)
View(HCM_Death)
dim(HCM_Death)
points(data$Age)
points(data$Age, data$Patient)
points(pressure$temperature, pressure$pressure )
points(pressure$temperature, pressure$pressure )
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
points(pressure$temperature, pressure$pressure )
points(pressure$temperature, pressure$pressure/2, col="red" )
lines(pressure$temperature, pressure$pressure/2, col="red" )
View(pressure)
rm(list = ls())
View(mtcars)
library(ggplot2)
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
points(pressure$temperature, pressure$pressure )
ggplot(HCM_Death, aes(x=Age,)) + geom_point()
ggplot(HCM_Death, aes(x=Age)) + geom_point()
# Du lieu thong ke cac truong hop bi nhiem COVID-19 tai Viet Nam
rm(list=ls())
PATH <- "C://Users//Longddz//Desktop//DataAnalyst//patient_information_en.csv"
raw_data <- read.csv(PATH, header = TRUE, sep = ",")
## tien su ly du lieu
library("dplyr")
#Sap xep lai du lieu theo muc ID tang dan
sort_data <- arrange(raw_data, raw_data$ID)
#Loai bo nhung du lieu trung lap
# 10749 10000 BN10000 3 Bac Giang Recovered Vietnamese
# 10750 10000 BN10000 3 Bac Giang Recovered Vietnamese
un_duplicate <- unique(sort_data, by = "ID")
#xu ly cot Age: Thay the cac du lieu Na thanh tuoi trung binh
tbAge <-round(mean(un_duplicate$Age, na.rm = TRUE))
un_duplicate$Age[is.na(un_duplicate$Age)]<- tbAge
#xu ly cot Patient chua du lieu sai dinh dang vi du: "(BN1231", "BN 1041"
un_duplicate$Patient <- gsub("[(]","",un_duplicate$Patient)
un_duplicate$Patient <- gsub(" ","",un_duplicate$Patient)
library(ggplot2)
data <-un_duplicate
#loc ra nhung benh nhan o HCM
HCM <- data[data$Location == 'Ho Chi Minh',]
#loc ra nhung benh nhan o HCM da tu vong va tren 60 tuoi
HCM_Death<- subset(HCM, HCM$Status=='Death'&HCM$Age>60)
ggplot(HCM_Death, aes(x=Age)) + geom_point()
ggplot(HCM_Death, aes(x=Age, y=Age)) + geom_point()
ggplot(HCM_Death, aes(x=ID, y=Age)) + geom_point()
ggplot(HCM_Death, aes(x=Patient, y=Age)) + geom_point()
ggplot(HCM_Death, aes(x=Patient, y=Age)) + geom_line()
ggplot(HCM_Death, aes(x=Patient, y=Age)) + geom_line() + geom_point()
ggplot(HCM_Death, aes(x=Patient, y=Age))geom_point()
ggplot(HCM_Death, aes(x=Patient, y=Age))  + geom_point()
# Du lieu thong ke cac truong hop bi nhiem COVID-19 tai Viet Nam
rm(list=ls())
# Du lieu thong ke cac truong hop bi nhiem COVID-19 tai Viet Nam
rm(list=ls())
PATH <- "C://Users//Longddz//Desktop//DataAnalyst//patient_information_en.csv"
raw_data <- read.csv(PATH, header = TRUE, sep = ",")
dim(raw_data)
names(raw_data)
View(raw_data)
## tien su ly du lieu
library("dplyr")
#Sap xep lai du lieu theo muc ID tang dan
sort_data <- arrange(raw_data, raw_data$ID)
View(sort_data)
#Loai bo nhung du lieu trung lap
# 10749 10000 BN10000 3 Bac Giang Recovered Vietnamese
# 10750 10000 BN10000 3 Bac Giang Recovered Vietnamese
un_duplicate <- unique(sort_data, by = "ID")
dim(un_duplicate)
#xu ly cot Age: Thay the cac du lieu Na thanh tuoi trung binh
tbAge <-round(mean(un_duplicate$Age, na.rm = TRUE))
tbAge
un_duplicate$Age[is.na(un_duplicate$Age)]<- tbAge
View(un_duplicate)
sum(!complete.cases(un_duplicate))
#xu ly cot Patient chua du lieu sai dinh dang vi du: "(BN1231", "BN 1041"
un_duplicate$Patient <- gsub("[(]","",un_duplicate$Patient)
un_duplicate$Patient <- gsub(" ","",un_duplicate$Patient)
library(ggplot2)
data <-un_duplicate
#Tinh thanh nao mac covid nhieu nhat
sort(table(data$Location), decreasing = TRUE)[1]
#loc ra nhung benh nhan o HCM
HCM <- data[data$Location == 'Ho Chi Minh',]
View(HCM)
ggplot(data, aes(x=Status)) +geom_bar() +
xlab("Tinh Trang") +
ylab("So ca mac") +
ggtitle("Thong ke ca mac tai HCM")
#loc ra nhung benh nhan o HCM da tu vong va tren 60 tuoi
HCM_Death<- subset(HCM, HCM$Status=='Death'&HCM$Age>60)
dim(HCM_Death)
ggplot(HCM_Death, aes(x=Patient, y=Age))  + geom_point()
#Nhom 10 tinh thanh nao it ca nhiem nhat
sort(table(data$Location), decreasing = FALSE)[1:10]
a
#Thong ke ca mac theo tinh thanh
ggplot(data, aes(y=Location)) +geom_bar() +
xlab("So ca mac") +
ylab("Tinh thanh") +
ggtitle("Thong ke ca mac theo tinh thanh")
#Do tuoi nho nhat va lon nhat
range(data$Age)
#Nhom tuoi nao mac covid nhieu nhat
sort(table(data$Age), decreasing = TRUE)[1:3]
ggplot(data, aes(x=Age)) +geom_bar() +
xlab("Do tuoi") +
ylab("So ca mac") +
ggtitle("Thong ke ca mac theo do tuoi")
# ti le phan tram giua nhung trang thai cua nguoi mac Covid
prop.table(table(data$Status))
ggplot(data, aes(x=Status)) +geom_bar() +
xlab("Trang thai") +
ylab("So ca mac") +
ggtitle("Ti le ca mac giua cac trang thai")
#Ti le giua cac trang thai theo tinh thanh
ggplot(data=data,aes(y=Location,fill=Status))+geom_bar()+
xlab("So ca mac") +
ylab("Tinh thanh") +
ggtitle("Ti le giua trang thai theo tinh thanh")
#nhung ca mac covid co nhung quoc tich nao
table(data$Nationality)
ggplot(data, aes(y=Nationality)) +geom_bar()
# Du lieu thong ke cac truong hop bi nhiem COVID-19 tai Viet Nam
rm(list=ls())
, 4, 5, 5, 6, 6, 7, 8, 10, 11, 11, 12, 12, 14),
score=c(64, 66, 76, 73, 74, 81, 83, 82, 80, 88, 84, 82, 91, 93, 89))
df <- data.frame(hours=c(1, 2, 4, 5, 5, 6, 6, 7, 8, 10, 11, 11, 12, 12, 14),score=c(64, 66, 76, 73, 74, 81, 83, 82, 80, 88, 84, 82, 91, 93, 89))
ame(hours=c(1, 2, 4, 5, 5, 6, 6, 7, 8, 10, 11, 11, 12, 12, 14),
s
ame(hours=c(1, 2, 4, 5, 5, 6, 6, 7, 8, 10, 11, 11, 12, 12, 14),
s
df <- data.frame(hours=c(1, 2, 4, 5, 5, 6, 6, 7, 8, 10, 11, 11, 12, 12, 14),
score=c(64, 66, 76, 73, 74, 81, 83, 82, 80, 88, 84, 82, 91, 93, 89))
ggplot(df, aes(x=hours, y=score)) +geom_bar()
library("dplyr")
library(ggplot2)
ggplot(df, aes(x=hours, y=score)) +geom_bar()
library("dplyr")
library(ggplot2)
ggplot(df, aes(x=hours, y=score)) +geom_bar()
plot(df$hours, df$score)
scatter.smooth(hours, score, main='Hours studied vs. Exam Score')
scatter.smooth(df$hours, df$score, main='Hours studied vs. Exam Score')
boxplot(df$hours, df$score)
par(mfrow =c(1,2))
boxplot(df$hours)
boxplot(df$score)
library(ggplot2)
library(car)
library(caret)
library(corrplot)
data(mtcars)
install.packages(car)
install.packages("car")
install.packages("car")
install.packages("caret")
install.packages("corrplot")
library(ggplot2)
library(car)
library(caret)
library(corrplot)
data(mtcars)
View(mtcars)
# Looking at variables
str(mtcars)
dim(mtcars)
head(mtcars)
summary(mtcars)
names(mtcars)
# Read CSV data file
mydata = read.csv("C:\Users\Longddz\Desktop\DataAnalyst\dataset\\mba.csv")
# Read CSV data file
mydata = read.csv("C:\\Users\\Longddz\\Desktop\\DataAnalyst\\dataset\\mba.csv")
# See first 10 observations
head(mydata, n=10)
# Split data
dt <- split(mydata$Products, mydata$ID)
View(dt)
rm(list=ls()) ; gc()
rm(list=ls()) ; gc()
library(ggplot2) # Data visualization
library(readr) # CSV file I/O, e.g. the read_csv function
#library(tidyverse)
library(magrittr)
library(dplyr)
library(dplyr)
library(reshape2)
customr <- read_csv("./dataset/online_retail.csv",col_names = TRUE)
customr <- read_csv("./online_retail.csv",col_names = TRUE)
customr <- read_csv("./online_retail.csv",col_names = TRUE)
customr <- read_csv("C:\\Users\\Longddz\\Desktop\\DataAnalyst\\online_retail.csv",col_names = TRUE)
customr
rm(list=ls()) ; gc()
library(ggplot2)
library(readr)
library(magrittr)
library(dplyr)
library(reshape2)
customr <- read_csv("C:\\Users\\Longddz\\Desktop\\DataAnalyst\\online_retail.csv",col_names = TRUE)
customr
Head(customr)
head(customr)
#To find the customer with StockCode without null
customer1=customr[!(customr$StockCode==" "),]
customer1
abc<-customer1 %>% group_by(customer1$Country)%>%summarise(n=n())%>%ungroup()%>%arrange()
abc
#What is the frequency distribution of customers, county-wise? (May use table() command)
table(customr$Country)
#What are the total number of unique customers?
n_distinct(customer1$CustomerID)
#What are the total number of unique StockCode?
n_distinct(customer1$StockCode)
#which days of week maximum sales occur?
library(lubridate)
Max_week_sale <- filter(customer1, !is.na(CustomerID),!is.na(StockCode))
Max_week_sale$InvoiceDate=mdy_hm(Max_week_sale$InvoiceDate)
Max_week_sale$Weekdays <- weekdays(Max_week_sale$InvoiceDate)
Max_week_sale$Sales <- Max_week_sale$Quantity*Max_week_sale$UnitPrice
highsales <- Max_week_sale %>% group_by(Max_week_sale$Weekdays) %>% summarize(SalesAmount=sum(Sales)) %>% arrange(desc(SalesAmount))
head(highsales)
repeatcustomers<-customer1%>%group_by((CustomerID),n_distinct(InvoiceDate))%>%summarise(Count=n())%>%ungroup()%>%arrange()
repeatcustomers
#Which products bring most revenue?
revenue<-customer1%>%group_by(customer1$StockCode)%>%summarise(sales=sum(Quantity*UnitPrice))%>%ungroup()%>%arrange(desc(sales))
revenue
# To create new variable Sales_Amount along with all variables.
Sales_Detail<-customer1 %>% mutate(Sales_Amount = Quantity*UnitPrice)
#To be found maximum Sales Amount countrywise
x1 %>%group_by(Country)%>% summarise(SalesAmount =sum(Sales_Amount)) %>%arrange(desc(SalesAmount))
# Removed Sales_Amout where values are coming na
x1<-Sales_Detail%>% filter(!is.na(Sales_Amount))
#To be found maximum Sales Amount countrywise
x1 %>%group_by(Country)%>% summarise(SalesAmount =sum(Sales_Amount)) %>%arrange(desc(SalesAmount))
Max_week_sale$hours_sale <- hour(Max_week_sale$InvoiceDate)
Peakhour <- Max_week_sale %>% group_by(Max_week_sale$hours_sale) %>% summarise(Hour_sales=sum(hours_sale)) %>% arrange(desc(Hour_sales))
head(Peakhour)
Max_week_sale$Month<-month(Max_week_sale$InvoiceDate)
Max_week_sale %>% group_by(Month) %>% summarise(sales_month=sum(Sales))
#Who are the top 10 customers which purchase most?
Max_week_sale %>% group_by(CustomerID) %>% summarise(Spend=sum(Sales)) %>% arrange(desc(Spend)) %>%head(10)
View(customr)
View(customer1)
#Tỉ lệ giữa các quốc gia
table(customr$Country)
head(highsales)
#Sản phẩm có doanh thu cao nhất
revenue<-customer1%>%group_by(customer1$StockCode)%>%summarise(sales=sum(Quantity*UnitPrice))%>%ungroup()%>%arrange(desc(sales))
revenue
#Giờ nào đông khách nhất
Max_week_sale$hours_sale <- hour(Max_week_sale$InvoiceDate)
Peakhour <- Max_week_sale %>% group_by(Max_week_sale$hours_sale) %>% summarise(Hour_sales=sum(hours_sale)) %>% arrange(desc(Hour_sales))
head(Peakhour)
#10 khách hàng mua nhiều nhất
Max_week_sale %>% group_by(CustomerID) %>% summarise(Spend=sum(Sales)) %>% arrange(desc(Spend)) %>%head(10)
install.packages("shiny")
library(shiny)
ui = fluidPage(sidebarLayout(sidebarPanel("Welcome to Shiny App"),
mainPanel("This is main Panel")))
server = function(input, output) { }
shinyApp(ui, server)
ui = fluidPage(titlePanel("My favorite novels:"),
sidebarLayout(sidebarPanel(),
mainPanel()))
server = function(input, output) {}
shinyApp(ui, server)
ui = fluidPage(sidebarLayout(sidebarPanel(
a("Click here!", href = "http://www.listendata.com/")),
mainPanel()))
server = function(input, output) {}
shinyApp(ui, server)
ui = fluidPage(titlePanel("My favorite novels:"),
sidebarLayout(sidebarPanel(
("My favorite novels are:"),
br(),
h4(strong("The Kiterunner"), "a novel by", em("Khaled Hoseinni")),
h2(strong("Jane Eyre"), "a novel by", code("Charolette Bronte")),
strong(
"The diary of a young girl",
"by",
span("Anne Frank", style = "color:blue")
),
div(strong("A thousand splendid suns"), "by Khaled Hoseinni", style = "color: red")
),
mainPanel()))
server = function(input, output) { }
shinyApp(ui, server)
ui = fluidPage(titlePanel("Nguyễn Văn Long:"),
sidebarLayout(sidebarPanel(
("My favorite novels are:"),
br(),
h4(strong("The Kiterunner"), "a novel by", em("Khaled Hoseinni")),
h2(strong("Jane Eyre"), "a novel by", code("Charolette Bronte")),
strong(
"The diary of a young girl",
"by",
span("Anne Frank", style = "color:blue")
),
div(strong("A thousand splendid suns"), "by Khaled Hoseinni", style = "color: red")
),
mainPanel()))
ui = fluidPage(titlePanel("Nguyễn Văn Long:"),
sidebarLayout(sidebarPanel(
("Thông tin cá nhân:"),
br(),
h4(Ngày sinh: 23/10/2000),
h4(Lớp: 18IT2),
a("Link facebook!", href = "https://www.facebook.com/pvml.long")),
h2(strong("Jane Eyre"), "a novel by", code("Charolette Bronte")),
mainPanel()))
server = function(input, output) { }
shinyApp(ui, server)
ui = fluidPage(titlePanel("Nguyễn Văn Long:"),
sidebarLayout(sidebarPanel(
("Thông tin cá nhân:"),
br(),
h4(Ngày sinh: 23/10/2000),
h4(Lớp: 18IT2),
a("Link facebook!", href = "https://www.facebook.com/pvml.long")),
h2(strong("Jane Eyre"), "a novel by", code("Charolette Bronte")),
mainPanel()))
server = function(input, output) { }
shinyApp(ui, server)
ui = fluidPage(titlePanel("Nguyễn Văn Long:"),
sidebarLayout(sidebarPanel(
("Thông tin cá nhân:"),
br(),
h4(Ngày sinh: 23/10/2000),
h4(Lớp: 18IT2),
a("Link facebook!", href = "https://www.facebook.com/pvml.long")),
h2(strong("Jane Eyre"), "a novel by", code("Charolette Bronte")),
mainPanel()))
ui = fluidPage(titlePanel("Nguyễn Văn Long:"),
sidebarLayout(sidebarPanel(
("Thông tin cá nhân:"),
br(),
h4("Ngày sinh: 23/10/2000"),
h4("Lớp: 18IT2"),
a("Link facebook!", href = "https://www.facebook.com/pvml.long")),
h2(strong("Jane Eyre"), "a novel by", code("Charolette Bronte")),
mainPanel()))
ui = fluidPage(titlePanel("Nguyễn Văn Long:"),
sidebarLayout(sidebarPanel(
("Thông tin cá nhân:"),
br(),
h4("Ngày sinh: 23/10/2000"),
h4("Lớp: 18IT2"),
a("Link facebook!", href = "http://www.listendata.com/")),
h2(strong("Jane Eyre"), "a novel by", code("Charolette Bronte")),
),
mainPanel()))
server = function(input, output) { }
shinyApp(ui, server)
ui = fluidPage(titlePanel("Nguyễn Văn Long:"),
sidebarLayout(sidebarPanel(
("Thông tin cá nhân:"),
br(),
h4("Ngày sinh: 23/10/2000"),
h4("Lớp: 18IT2"),
a("Link facebook!", href = "http://www.listendata.com/")),
h2(strong("Jane Eyre"), "a novel by", code("Charolette Bronte")),
),
mainPanel()))
ui = fluidPage(titlePanel("Nguyễn Văn Long:"),
sidebarLayout(sidebarPanel(
("Thông tin cá nhân:"),
br(),
h4("Ngày sinh: 23/10/2000"),
h4("Lớp: 18IT2"),
a("Link facebook!", href = "http://www.listendata.com/")),
h2(strong("Jane Eyre"), "a novel by", code("Charolette Bronte")),
),
mainPanel())
server = function(input, output) { }
shinyApp(ui, server)
ui = fluidPage(titlePanel("Nguyễn Văn Long:"),
sidebarLayout(sidebarPanel(
("Thông tin cá nhân:"),
br(),
h4("Ngày sinh: 23/10/2000"),
h4("Lớp: 18IT2"),
h4("Trường: CNTT và Truyền thông Việt Hàn", style = "color: red"),
a("Link facebook!", href = "https://www.facebook.com/pvml.long")),
),
mainPanel())
ui = fluidPage(titlePanel("Nguyễn Văn Long:"),
sidebarLayout(sidebarPanel(
("Thông tin cá nhân:"),
br(),
h4("Ngày sinh: 23/10/2000"),
h4("Lớp: 18IT2"),
h4("Trường: CNTT và Truyền thông Việt Hàn"),
a("Link facebook!", href = "https://www.facebook.com/pvml.long")),
),
mainPanel())
ui = fluidPage(titlePanel("Nguyễn Văn Long:"),
sidebarLayout(sidebarPanel(
("Thông tin cá nhân:"),
br(),
h4("Ngày sinh: 23/10/2000"),
h4("Lớp: 18IT2"),
h4("Trường: CNTT và Truyền thông Việt Hàn"),
a("Link facebook!", href = "http://www.listendata.com/")),
),
mainPanel())
ui = fluidPage(titlePanel("Nguyễn Văn Long:"),
sidebarLayout(sidebarPanel(
("Thông tin cá nhân:"),
br(),
h4("Ngày sinh: 23/10/2000"),
h4("Lớp: 18IT2"),
h4("Trường: CNTT và Truyền thông Việt Hàn"),
a("Link facebook!", href = "http://www.listendata.com/")),
),
mainPanel())
server = function(input, output) { }
shinyApp(ui, server)
ui = fluidPage(sidebarLayout(
sidebarPanel(helpText("This questionnaire is subject to privacy."),
textInput(inputId = "name", label = "Enter your name.")
),
mainPanel()
))
server = function(input, output) { }
shinyApp(ui, server)
ui =  fluidPage(sidebarLayout(
sidebarPanel(
radioButtons(
inputId = "month",
label = "In which month are you born?",
choices = list(
"Jan - March" = 1,
"April - June" = 2,
"July - September" = 3,
"October - November" = 4
),
selected = 1
),
numericInput(
inputId = "children_count",
label = "How many children do you have?",
value = 2,
min = 0,
max = 15
),
selectInput(
inputId  = "smoker",
label = "Are you a smoker?",
choices = c("Yes", "No", "I smoke rarely"),
selected = "Yes"
),
checkboxInput(
inputId = "checkbox",
label = "Are you a human?",
value = FALSE
),
checkboxGroupInput(
inputId = "checkbox2",
label = "2 + 2 = ?",
choices = list(4, "Four", "IV", "None of the above")
)
),
mainPanel()
))
server = function(input, output) { }
shinyApp(ui, server)
ui = fluidPage(titlePanel("Viewing data"),
sidebarLayout(sidebarPanel(
selectInput(
inputId = "specie",
label = "Select the flower specie",
choices = c("setosa", "versicolor", "virginica"),
selected = "setosa"
)
),
mainPanel(tableOutput("data"))))
server = function(input, output) {
output$data = renderTable({
iris[iris$Species == input$specie, ]
})
}
shinyApp(ui, server)
shiny::runApp('C:/Users/Longddz/Desktop/DataAnalyst/Shinyapp')
runApp('C:/Users/Longddz/Desktop/DataAnalyst/Shinyapp')
runApp('C:/Users/Longddz/Desktop/DataAnalyst/Shinyapp')
shinyServer(
function(input, output, session) {
output$myPlot <-renderPlot({
disType <- input$Distribution
size  <- input$SampleSize
if(disType =='Normal'){
randomVec <- rnorm(size, mean = as.numeric(input$Mean), sd=as.numeric(input$sd))
}
else{
randomVec <- rexp(size, rate = 1/as.numeric(input$lambda))
}
hist(randomVec, col="blue")
})
}
)
runApp('C:/Users/Longddz/Desktop/DataAnalyst/Shinyapp')
shiny::runApp('C:/Users/Longddz/Desktop/DataAnalyst/VietNamNetTopModel')
shiny::runApp('C:/Users/Longddz/Desktop/DataAnalyst/VietNamNetTopModel')
